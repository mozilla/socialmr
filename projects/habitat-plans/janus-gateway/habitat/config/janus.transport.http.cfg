; Web server stuff: whether any should be enabled, which ports they
; should use, whether security should be handled directly or demanded to
; an external application (e.g., web frontend) and what should be the
; base path for the Janus API protocol. You can also specify the
; threading model to use for the HTTP webserver: by default this is
; 'unlimited' (which means a thread per connection, as specified by the
; libmicrohttpd documentation), using a number will make use of a thread
; pool instead. Since long polls are involved, make sure you choose a
; value that doesn't keep new connections waiting. Notice that by default
; all the web servers will try and bind on both IPv4 and IPv6: if you
; want to only bind to IPv4 addresses (e.g., because your system does not
; support IPv6), you should set the web server 'ip' property to '0.0.0.0'.
[general]
json = {{ cfg.transports.http.json }}				; Whether the JSON messages should be indented (default),
							; plain (no indentation) or compact (no indentation and no spaces)
base_path = {{ cfg.transports.http.base_path }}			; Base path to bind to in the web server (plain HTTP only)
threads = {{ cfg.transports.http.threads }}			; unlimited=thread per connection, number=thread pool
http = {{ cfg.transports.http.http }}					; Whether to enable the plain HTTP interface
port = {{ cfg.transports.http.port }}					; Web server HTTP port
{{#if cfg.transports.http.interface }}
interface = {{ cfg.transports.http.interface }}			; Whether we should bind this server to a specific interface only
{{/if}}
{{#if cfg.transports.http.ip }}
ip = {{ cfg.transports.http.ip }}			; Whether we should bind this server to a specific IP address (v4 or v6) only
{{/if}}
https = {{ cfg.transports.http.https }}					; Whether to enable HTTPS (default=no)
{{#if cfg.transports.http.secure_port }}
secure_port = {{ cfg.transports.http.secure_port }}			; Web server HTTPS port, if enabled
{{/if}}
{{#if cfg.transports.http.secure_interface }}
secure_interface = {{ cfg.transports.http.secure_interface }}	; Whether we should bind this server to a specific interface only
{{/if}}
{{#if cfg.transports.http.secure_ip }}
secure_ip = {{ cfg.transports.http.secure_ip }}	; Whether we should bind this server to a specific IP address (v4 or v6) only
{{/if}}
{{#if cfg.transports.http.acl }}
acl = {{ cfg.transports.http.acl }}		; Only allow requests coming from this comma separated list of addresses
{{/if}}

; Janus can also expose an admin/monitor endpoint, to allow you to check
; which sessions are up, which handles they're managing, their current
; status and so on. This provides a useful aid when debugging potential
; issues in Janus. The configuration is pretty much the same as the one
; already presented above for the webserver stuff, as the API is very
; similar: choose the base bath for the admin/monitor endpoint (/admin
; by default), ports, threading model, etc. Besides, you can specify
; a secret that must be provided in all requests as a crude form of
; authorization mechanism, and partial or full source IPs if you want to
; limit access basing on IP addresses. For security reasons, this
; endpoint is disabled by default, enable it by setting admin_http=yes.
[admin]
admin_base_path = {{ cfg.transports.http.admin_base_path }}		; Base path to bind to in the admin/monitor web server (plain HTTP only)
admin_threads = {{ cfg.transports.http.admin_threads }}		; unlimited=thread per connection, number=thread pool
admin_http = {{ cfg.transports.http.admin_http }}					; Whether to enable the plain HTTP interface
admin_port = {{ cfg.transports.http.admin_port }}				; Admin/monitor web server HTTP port
{{#if cfg.transports.http.admin_interface }}
admin_interface = {{ cfg.transports.http.admin_interface }}			; Whether we should bind this server to a specific interface only
{{/if}}
{{#if cfg.transports.http.admin_ip }}
admin_ip = {{ cfg.transports.http.admin_ip }}			; Whether we should bind this server to a specific IP address (v4 or v6) only
{{/if}}
admin_https = {{ cfg.transports.http.admin_https }}				; Whether to enable HTTPS (default=no)
{{#if cfg.transports.http.admin_secure_port }}
admin_secure_port = {{ cfg.transports.http.admin_secure_port }}		; Admin/monitor web server HTTPS port, if enabled
{{/if}}
{{#if cfg.transports.http.admin_secure_interface }}
admin_secure_interface = {{ cfg.transports.http.admin_secure_interface }}	; Whether we should bind this server to a specific interface only
{{/if}}
{{#if cfg.transports.http.admin_secure_ip }}
admin_secure_ip = {{ cfg.transports.http.admin_secure_ip }}	; Whether we should bind this server to a specific IP address (v4 or v6) only
{{/if}}
{{#if cfg.transports.http.admin_acl }}
admin_acl = {{ cfg.transports.http.admin_acl }}	; Only allow requests coming from this comma separated list of addresses
{{/if}}

; The HTTP servers created in Janus support CORS out of the box, but by
; default they return a wildcard (*) in the 'Access-Control-Allow-Origin'
; header. This works fine in most situations, except when we have to
; respond to a credential request (withCredentials=true in the XHR). If
; you need that, uncomment and set the 'allow_origin' below to specify
; what must be returned in 'Access-Control-Allow-Origin'. More details:
; https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
[cors]
{{#if cfg.transports.http.allow_origin }}
allow_origin = {{ cfg.transports.http.allow_origin }}
{{/if}}

; Certificate and key to use for HTTPS.
[certificates]
cert_pem = {{ pkg.svc_files_path }}/https.pem
cert_key = {{ pkg.svc_files_path }}/https.key
