; General configuration: folders where the configuration and the plugins
; can be found, how output should be logged, whether Janus should run as
; a daemon or in foreground, default interface to use, debug/logging level
; and, if needed, shared apisecret and/or token authentication mechanism
; between application(s) and Janus.
[general]
configs_folder = {{ pkg.svc_config_path }}
plugins_folder = {{ pkg.path }}/lib/janus/plugins		; Plugins folder
transports_folder = {{ pkg.path }}/lib/janus/transports	; Transports folder
events_folder = {{ pkg.path }}/lib/janus/events			; Event handlers folder
log_to_stdout = false				; Whether the Janus output should be written
									; to stdout or not (default=true)
log_to_file = {{ pkg.svc_var_path }}/janus.log	; Whether to use a log file or not
daemonize = false					; Whether Janus should run as a daemon
pid_file = {{ pkg.svc_var_path }}/janus-self.pid		; PID file to create when Janus has been
									; started, and to destroy at shutdown
interface = {{ cfg.general.iface }}		; Interface to use (will be used in SDP)
debug_level = {{ cfg.general.debug_level }}  			; Debug/logging level, valid values are 0-7
debug_timestamps = yes		; Whether to show a timestamp for each log line
debug_colors = yes			; Whether colors should be disabled in the log
api_secret = {{ cfg.general.api_secret }}		; String that all Janus requests must contain
;							to be accepted/authorized by the Janus core.
;							Useful if you're wrapping all Janus API requests
;							in your servers (that is, not in the browser,
;							where you do the things your way) and you
;							don't want other application to mess with
;							this Janus instance.
token_auth = {{ cfg.general.token_auth }}		; Enable a token based authentication
;							mechanism to force users to always provide
;							a valid token in all requests. Useful if
;							you want to authenticate requests from web
;							users. For this to work, the Admin API MUST
;							be enabled, as tokens are added and removed
;							through messages sent there.
admin_secret = {{ cfg.general.admin_secret }}	; String that all Janus requests must contain
;								  to be accepted/authorized by the admin/monitor.
;								  only needed if you enabled the admin API
;								  in any of the available transports.
server_name = {{ cfg.general.server_name }}	; Public name of this Janus instance
;								  as it will appear in an info request
session_timeout = {{ cfg.general.session_timeout }} ; How long (in seconds) we should wait before
;							deciding a Janus session has timed out. A
;							session times out when no request is received
;							for session_timeout seconds (default=60s).
;							Setting this to 0 will disable the timeout
;							mechanism, which is NOT suggested as it may
;							risk having orphaned sessions (sessions not
;							controlled by any transport and never freed).
;							To avoid timeouts, keep-alives can be used.
{{#if cfg.general.recordings_tmp_ext }}
recordings_tmp_ext = {{ cfg.general.recordings_tmp_ext }}	; The extension for recordings, in Janus, is
{{/if}}
;							.mjr, a custom format we devised ourselves.
;							By default, we save to .mjr directly. If you'd
;							rather the recording filename have a temporary
;							extension while it's being saved, and only
;							have the .mjr extension when the recording
;							is over (e.g., to automatically trigger some
;							external scripts), then uncomment and set the
;							recordings_tmp_ext property to the extension
;							to add to the base (e.g., tmp --> .mjr.tmp).


; Certificate and key to use for DTLS.
[certificates]
cert_pem = {{ pkg.svc_files_path }}/dtls.pem
cert_key = {{ pkg.svc_files_path }}/dtls.key


; Media-related stuff: you can configure whether if you want
; to enable IPv6 support (still WIP, so handle with care), the maximum size
; of the NACK queue (in milliseconds, defaults to 300ms) for retransmissions, the
; range of ports to use for RTP and RTCP (by default, no range is envisaged), the
; starting MTU for DTLS (1472 by default, it adapts automatically),
; if BUNDLE should be forced (defaults to false) and if RTCP muxing should
; be forced (defaults to false), and finally how much time, in seconds,
; should pass with no media (audio or video) being received before Janus
; notifies you about this (default=1s, 0 disables these events entirely).
[media]
ipv6 = {{ cfg.media.ipv6 }}
max_nack_queue = {{ cfg.media.max_nack_queue }}
rtp_port_range = {{ cfg.media.rtp_port_range }}
dtls_mtu = {{ cfg.media.dtls_mtu }}
force-bundle = {{ cfg.media.force_bundle }}
force-rtcp-mux = {{ cfg.media.force_rtcp_mux }}
no_media_timer = {{ cfg.media.no_media_timer }}


; NAT-related stuff: specifically, you can configure the STUN/TURN
; servers to use to gather candidates if the gateway is behind a NAT,
; and srflx/relay candidates are needed. In case STUN is not enough and
; this is needed (it shouldn't), you can also configure Janus to use a
; TURN server; please notice that this does NOT refer to TURN usage in
; browsers, but in the gathering of relay candidates by Janus itself,
; e.g., if you want to limit the ports used by a Janus instance on a
; private machine. Furthermore, you can choose whether Janus should be
; configured to work in ICE-Lite mode (by default it doesn't). Finally,
; you can also enable ICE-TCP support (beware that it currently *only*
; works if you enable ICE Lite as well), choose which interfaces should
; be used for gathering candidates, and enable or disable the
; internal libnice debugging, if needed. 
[nat]
{{#if cfg.nat.stun_server}}
stun_server = {{ cfg.nat.stun_server }}
{{/if}}
{{#if cfg.nat.stun_port}}
stun_port = {{ cfg.nat.stun_port }}
{{/if}}
nice_debug = {{ cfg.nat.nice_debug }}
ice_lite = {{ cfg.nat.ice_lite }}
ice_tcp = {{ cfg.nat.ice_tcp }}

; In case you're deploying Janus on a server which is configured with
; a 1:1 NAT (e.g., Amazon EC2), you might want to also specify the public
; address of the machine using the setting below. This will result in
; all host candidates (which normally have a private IP address) to
; be rewritten with the public address provided in the settings. As
; such, use the option with caution and only if you know what you're doing.
; Besides, it's still recommended to also enable STUN in those cases,
; and keep ICE Lite disabled as it's not strictly speaking a public server.
{{#if cfg.nat.nat_1_1_mapping }}
nat_1_1_mapping = {{ cfg.nat.nat_1_1_mapping }}
{{/if}}

; You can configure a TURN server in two different ways: specifying a
; statically configured TURN server, and thus provide the address of the
; TURN server, the transport (udp/tcp/tls) to use, and a set of valid
; credentials to authenticate...
{{#if cfg.nat.turn_server }}
turn_server = {{ cfg.nat.turn_server }}
turn_port = {{ cfg.nat.turn_port }}
turn_type = {{ cfg.nat.turn_type }}
turn_user = {{ cfg.nat.turn_user }}
turn_pwd = {{ cfg.nat.turn_pwd }}
{{/if}}

; ... or you can make use of the TURN REST API to get info on one or more
; TURN services dynamically. This makes use of the proposed standard of
; such an API (https://tools.ietf.org/html/draft-uberti-behave-turn-rest-00)
; which is currently available in both rfc5766-turn-server and coturn.
; You enable this by specifying the address of your TURN REST API backend,
; the HTTP method to use (GET or POST) and, if required, the API key Janus
; must provide.
{{#if cfg.nat.turn_rest_api }}
turn_rest_api = {{ cfg.nat.turn_rest_api }}
turn_rest_api_key = {{ cfg.nat.turn_rest_api_key }}
turn_rest_api_method = {{ cfg.nat.turn_rest_api_method }}
{{/if}}

; You can also choose which interfaces should be explicitly used by the
; gateway for the purpose of ICE candidates gathering, thus excluding
; others that may be available. To do so, use the 'ice_enforce_list'
; setting and pass it a comma-separated list of interfaces or IP addresses
; to enforce. This is especially useful if the server hosting the gateway
; has several interfaces, and you only want a subset to be used. Any of
; the following examples are valid:
;     ice_enforce_list = eth0
;     ice_enforce_list = eth0,eth1
;     ice_enforce_list = eth0,192.168.
;     ice_enforce_list = eth0,192.168.0.1
; By default, no interface is enforced, meaning Janus will try to use them all.
{{#if cfg.nat.ice_enforce_list }}
ice_enforce_list = {{ cfg.nat.ice_enforce_list }}
{{/if}}

; In case you don't want to specify specific interfaces to use, but would
; rather tell Janus to use all the available interfaces except some that
; you don't want to involve, you can also choose which interfaces or IP
; addresses should be excluded and ignored by the gateway for the purpose
; of ICE candidates gathering. To do so, use the 'ice_ignore_list' setting
; and pass it a comma-separated list of interfaces or IP addresses to
; ignore. This is especially useful if the server hosting the gateway
; has several interfaces you already know will not be used or will simply
; always slow down ICE (e.g., virtual interfaces created by VMware).
; Partial strings are supported, which means that any of the following
; examples are valid:
;     ice_ignore_list = vmnet8,192.168.0.1,10.0.0.1
;     ice_ignore_list = vmnet,192.168.
; Just beware that the ICE ignore list is not used if an enforce list
; has been configured. By default, Janus ignores all interfaces whose
; name starts with 'vmnet', to skip VMware interfaces:
ice_ignore_list = {{ cfg.nat.ice_ignore_list }}

; You can choose which of the available plugins should be
; enabled or not. Use the 'disable' directive to prevent Janus from
; loading one or more plugins: use a comma separated list of plugin file
; names to identify the plugins to disable. By default all available
; plugins are enabled and loaded at startup.
[plugins]
{{#if cfg.plugins.disabled }}
disable = {{ strJoin cfg.plugins.disabled ","}}
{{/if}}

; You can choose which of the available transports should be enabled or
; not. Use the 'disable' directive to prevent Janus from loading one
; or more transport: use a comma separated list of transport file names
; to identify the transports to disable. By default all available
; transports are enabled and loaded at startup.
[transports]
{{#if cfg.transports.disabled }}
disable = {{ strJoin cfg.transports.disabled ","}}
{{/if}}

; Event handlers allow you to receive live events from Janus happening
; in core and/or plugins. Since this can require some more resources,
; the feature is disabled by default. Setting broadcast to yes will
; enable them. You can then choose which of the available event handlers
; should be loaded or not. Use the 'disable' directive to prevent Janus
; from loading one or more event handlers: use a comma separated list of
; file names to identify the event handlers to disable. By default, if
; broadcast is set to yes all available event handlers are enabled and
; loaded at startup. Finally, you can choose how often media statistics
; (packets sent/received, losses, etc.) should be sent: by default it's
; once per second (audio and video statistics sent separately), but may
; considered too verbose, or you may want to limit the number of events,
; especially if you have many PeerConnections active. To change this,
; just set 'stats_period' to the number of seconds that should pass in
; between statistics for each handle. Setting it to 0 disables them (but
; not other media-related events).
[events]
broadcast = {{ cfg.events.broadcast }}
stats_period = {{ cfg.events.stats_period }}

{{#if cfg.events.disabled }}
disable = {{ strJoin cfg.events.disabled ","}}
{{/if}}
