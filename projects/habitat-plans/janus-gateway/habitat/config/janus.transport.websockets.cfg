; WebSockets stuff: whether they should be enabled, which ports they
; should use, and so on.
[general]
json = {{ cfg.transports.websockets.json }}				; Whether the JSON messages should be indented (default),
							; plain (no indentation) or compact (no indentation and no spaces)
ws = {{ cfg.transports.websockets.ws }}					; Whether to enable the WebSockets API
ws_port = {{ cfg.transports.websockets.ws_port }}				; WebSockets server port
{{#if cfg.transports.websockets.interface }}
ws_interface = {{ cfg.transports.websockets.ws_interface }}		; Whether we should bind this server to a specific interface only
{{/if}}
{{#if cfg.transports.websockets.interface }}
ws_ip = {{ cfg.transports.websockets.ws_ip }}		; Whether we should bind this server to a specific IP address only
{{/if}}
wss = {{ cfg.transports.websockets.wss }}					; Whether to enable secure WebSockets
{{#if cfg.transports.websockets.interface }}
wss_port = {{ cfg.transports.websockets.wss_port }}			; WebSockets server secure port, if enabled
{{/if}}
{{#if cfg.transports.websockets.interface }}
wss_interface = {{ cfg.transports.websockets.wss_interface }}		; Whether we should bind this server to a specific interface only
{{/if}}
{{#if cfg.transports.websockets.interface }}
wss_ip = {{ cfg.transports.websockets.wss_ip }}		; Whether we should bind this server to a specific IP address only
{{/if}}
{{#if cfg.transports.websockets.interface }}
ws_logging = {{ cfg.transports.websockets.ws_logging }}				; libwebsockets debugging level (0 by default)
{{/if}}
{{#if cfg.transports.websockets.interface }}
ws_acl = {{ cfg.transports.websockets.ws_acl }}	; Only allow requests coming from this comma separated list of addresses
{{/if}}

; If you want to expose the Admin API via WebSockets as well, you need to
; specify a different server instance, as you cannot mix Janus API and
; Admin API messaging. Notice that by default the Admin API support via
; WebSockets is disabled.
[admin]
admin_ws = {{ cfg.transports.websockets.admin_ws }}					; Whether to enable the Admin API WebSockets API
admin_ws_port = {{ cfg.transports.websockets.admin_ws_port }}			; Admin API WebSockets server port, if enabled
{{#if cfg.transports.websockets.interface }}
admin_ws_interface = {{ cfg.transports.websockets.admin_ws_interface }}		; Whether we should bind this server to a specific interface only
{{/if}}
{{#if cfg.transports.websockets.interface }}
admin_ws_ip = {{ cfg.transports.websockets.admin_ws_ip }}		; Whether we should bind this server to a specific IP address only
{{/if}}
admin_wss = {{ cfg.transports.websockets.admin_wss }}					; Whether to enable the Admin API secure WebSockets
{{#if cfg.transports.websockets.interface }}
admin_wss_port = {{ cfg.transports.websockets.admin_wss_port }}			; Admin API WebSockets server secure port, if enabled
{{/if}}
{{#if cfg.transports.websockets.interface }}
admin_wss_interface = {{ cfg.transports.websockets.admin_wss_interface }}		; Whether we should bind this server to a specific interface only
{{/if}}
{{#if cfg.transports.websockets.interface }}
admin_wss_ip = {{ cfg.transports.websockets.admin_wss_ip }}		; Whether we should bind this server to a specific IP address only
{{/if}}
{{#if cfg.transports.websockets.interface }}
admin_ws_acl = {{ cfg.transports.websockets.admin_ws_acl }}	; Only allow requests coming from this comma separated list of addresses
{{/if}}

; Certificate and key to use for any secure WebSocket server, if needed.
[certificates]
cert_pem = {{ pkg.svc_files_path }}/wss.pem
cert_key = {{ pkg.svc_files_path }}/wss.key
